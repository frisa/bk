The Embedded_from_ASM_to_C++
=============================

Preface
=======
As the world of the embedded systems is growing extremely, simuntaleously with the increasing number of applications 
there is also growing the complexity of the embedded systems. The programing languages must fulfill the needs of the programers, 
who are now implementing the functionality much more challanging as in the pass. The assempler as the programing language does need
to be replaced with more sophisticated languages such as C or even C++. This development leads me to make the overview of the programing
principles which are applied to the peripherials in the embedded systems.

Bootloader
===========
The first sequence of the commands, which are processing in the CPU of the embedded system, belong to the booting sequence. During the 
booting phase the system is initialized. Normaly in the computing there are known two types of booting.
- Hard Booting - after the electrical power is switched on in the system, so the power-on self tests needs to be done.
- Soft Booting - the reboot is done only with the software, so usualy RAM cleared and initialization is proceeded.

The word bootloader come from the word bootstrap loader, so while the bootstrap used to wear the shoes to make the walk with them, the bootstrap loader
is used to load the minimum logic in the system to allow the system run the application program.
For the embedded systems the bootloader is responsible for the following two tasks:
- load the new application program if needed
- start the application program
To fullfil these tasks the bootloader usualy remain in the non-volatile memory at the beginning. To make it simple imageine the small piece 
of code which is programmed at the beginning of the non-volatile memory.

The Example of Cortex-M4
=========================
https://e2e.ti.com/group/jp/f/894/t/309869

The Linux Example on Raspberry Pi 3
===================================

When the Raspberry Pi is first turned on, the ARM core is off, and the GPU core is on. 
At this point the SDRAM is disabled.
The GPU starts executing the first stage bootloader, which is stored in ROM on the SoC. 
The first stage bootloader reads the SD card, and loads the second stage bootloader (bootcode.bin) into the L2 cache, and runs it.
bootcode.bin enables SDRAM, and reads the third stage bootloader (loader.bin) from the SD card into RAM, and runs it. 
[ More recent versions do not use a third stage bootloader. ]
[ If applicable ]loader.bin reads the GPU firmware (start.elf).
start.elf reads config.txt, cmdline.txt and kernel.img
loader.bin doesn't do much. It can handle .elf files, and so is needed to load start.elf at the top of memory 
(ARM uses SDRAM from address zero). 
There is a plan to add elf loading support to bootcode.bin, which would make loader.bin unnecessary, 
but it's a low priority (I guess it might save you 100ms on boot). [ This change has since taken place. ]

UART - Universal Asynchronous Reciever Transmiter
==================================================

I2C - Inter Integrated Circuit
===============================

SSI - Synchronous Serial Interface
===================================
The synchrone serial comunication which is used mainly in the comunication between the microcontroler and the sensor. The 
topology is the point to point with the master slave structure. The connection is done with four whires. The communication with the 
sensor is controled with the following logic. The data from the sensor (slave) are shifted out whan the sensor recieves the pulse train from the 
microcontroler (master) as shown below on the picture.

https://www.posital.com/media/posital_media/documents/AbsoluteEncoders_Context_Technology_SSI_AppNote.pdf







